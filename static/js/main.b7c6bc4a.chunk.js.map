{"version":3,"sources":["app/components/loader/Loader.tsx","styles/theme.ts","app/containers/navbar/Navbar.tsx","app/components/sidelist/Sidelist.tsx","app/containers/sidebar/Sidebar.tsx","app/containers/gallery/Gallery.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["Loader","className","Theme","global","font","family","colors","marineBlue","brightCerulean","milkGlass","nordicBreeze","focus","border","color","text","xsmall","size","small","medium","large","xlarge","xxlarge","Navbar","props","Box","tag","direction","align","justify","background","pad","left","right","vertical","elevation","style","zIndex","Heading","level","margin","Sidelist","useState","selected","setSelected","List","data","listData","itemProps","undefined","onClickItem","event","index","item","to","url","label","sidebarList","Sidebar","ResponsiveContext","Consumer","Collapsible","open","flex","width","AnimalsContainer","lazy","FruitsContainer","Gallery","Main","fallback","exact","path","App","Grommet","theme","full","fill","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b7c6bc4a.chunk.js","sourcesContent":["import React from 'react'\r\nimport './loader.scss'\r\n\r\nconst Loader = () => (\r\n  <div className=\"loader\">\r\n    <div className=\"dot\"></div>\r\n    <div className=\"dot\"></div>\r\n    <div className=\"dot\"></div>\r\n    <div className=\"dot\"></div>\r\n    <div className=\"dot\"></div>\r\n  </div>\r\n)\r\n\r\nexport default Loader\r\n","const Theme = {\r\n  global: {\r\n    font: {\r\n      family: `-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans',\r\n      'Droid Sans', 'Helvetica Neue', sans-serif;`,\r\n    },\r\n    colors: {\r\n      marineBlue: '#043353',\r\n      brightCerulean: '#18a4e0',\r\n      milkGlass: '#faf8f0',\r\n      nordicBreeze: '#d3dde6',\r\n    },\r\n    focus: {\r\n      border: {\r\n        color: '#18a4e0',\r\n      },\r\n    },\r\n  },\r\n  text: {\r\n    xsmall: { size: '0.75rem' },\r\n    small: { size: '0.825rem' },\r\n    medium: { size: '1rem' },\r\n    large: { size: '1.225rem' },\r\n    xlarge: { size: '1.5rem' },\r\n    xxlarge: { size: '2rem' },\r\n  },\r\n}\r\n\r\nexport default Theme\r\n","import React from 'react'\r\nimport { Box, Heading } from 'grommet'\r\n\r\nconst Navbar = (props: any) => (\r\n  <Box\r\n    tag=\"header\"\r\n    direction=\"row\"\r\n    align=\"center\"\r\n    justify=\"between\"\r\n    background=\"marineBlue\"\r\n    pad={{ left: 'medium', right: 'small', vertical: 'small' }}\r\n    elevation=\"medium\"\r\n    style={{ zIndex: 1 }}\r\n    {...props}\r\n  >\r\n    <Heading level=\"3\" margin=\"none\">\r\n      Items Gallery\r\n    </Heading>\r\n  </Box>\r\n)\r\n\r\nexport default Navbar\r\n","import React, { useState } from 'react'\r\nimport { List, Heading } from 'grommet'\r\nimport './sidelist.scss'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Sidelist = (props: any) => {\r\n  const [selected, setSelected] = useState(0)\r\n\r\n  const onListItemClick = (event: any): void => {\r\n    if (selected === event.index) {\r\n      return\r\n    }\r\n    setSelected(event.index)\r\n  }\r\n\r\n  return (\r\n    <List\r\n      className=\"sidebar-list\"\r\n      data={props.listData}\r\n      itemProps={selected >= 0 ? { [selected]: { background: 'brightCerulean' } } : undefined}\r\n      onClickItem={onListItemClick}\r\n    >\r\n      {(item: any) => (\r\n        <Link to={item.url}>\r\n          <Heading level={5}>{item.label}</Heading>\r\n        </Link>\r\n      )}\r\n    </List>\r\n  )\r\n}\r\n\r\nexport default Sidelist\r\n","import React from 'react'\r\nimport { Box, Collapsible, ResponsiveContext } from 'grommet'\r\nimport Sidelist from '../../components/sidelist/Sidelist'\r\n\r\nconst sidebarList = [\r\n  { label: 'Animals', url: '/animals' },\r\n  { label: 'Fruits', url: '/fruits' },\r\n]\r\n\r\nconst Sidebar = () => {\r\n  return (\r\n    <ResponsiveContext.Consumer>\r\n      {size => (\r\n        <Collapsible direction=\"horizontal\" open={size !== 'small'}>\r\n          <Box flex width=\"small\" background=\"nordicBreeze\" elevation=\"small\" align=\"center\">\r\n            <Sidelist listData={sidebarList} />\r\n          </Box>\r\n        </Collapsible>\r\n      )}\r\n    </ResponsiveContext.Consumer>\r\n  )\r\n}\r\n\r\nexport default Sidebar\r\n","import React, { Suspense, lazy } from 'react'\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\nimport '../../../styles/grid.scss'\r\nimport { Main } from 'grommet'\r\nimport Loader from '../../components/loader/Loader'\r\n\r\nconst AnimalsContainer = lazy(() => import('../animals/Animals'))\r\nconst FruitsContainer = lazy(() => import('../fruits/Fruits'))\r\n\r\nconst Gallery = () => {\r\n  return (\r\n    <Main pad=\"small\" background=\"milkGlass\">\r\n      <Suspense fallback={<Loader />}>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Redirect to=\"/animals\"></Redirect>\r\n          </Route>\r\n          <Route path=\"/animals\">\r\n            <AnimalsContainer />\r\n          </Route>\r\n          <Route path=\"/fruits\">\r\n            <FruitsContainer />\r\n          </Route>\r\n        </Switch>\r\n      </Suspense>\r\n    </Main>\r\n  )\r\n}\r\n\r\nexport default Gallery\r\n","import React from 'react'\r\nimport './App.scss'\r\nimport { Box, Grommet } from 'grommet'\r\nimport Theme from '../styles/theme'\r\nimport Navbar from './containers/navbar/Navbar'\r\nimport Sidebar from './containers/sidebar/Sidebar'\r\nimport Gallery from './containers/gallery/Gallery'\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Grommet theme={Theme} full>\r\n      <Router>\r\n        <Box fill>\r\n          <Navbar></Navbar>\r\n          <Box direction=\"row\" flex>\r\n            <Sidebar />\r\n            <Gallery />\r\n          </Box>\r\n        </Box>\r\n      </Router>\r\n    </Grommet>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config): void {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL || '', window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config): void {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = (): void => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = (): void => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.')\r\n    })\r\n}\r\n\r\nexport function unregister(): void {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './styles/index.scss'\r\nimport App from './app/App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}