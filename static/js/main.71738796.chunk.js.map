{"version":3,"sources":["styles/theme.ts","app/containers/navbar/Navbar.tsx","app/components/sidelist/Sidelist.tsx","app/containers/sidebar/Sidebar.tsx","environment.ts","app/components/preview/Preview.tsx","app/components/card/Card.tsx","app/containers/animals/Animals.tsx","app/services/animals.ts","app/containers/fruits/Fruits.tsx","app/services/fruits.ts","app/containers/gallery/Gallery.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["Theme","global","font","family","text","xsmall","size","small","medium","large","xlarge","xxlarge","Navbar","props","Box","tag","direction","align","justify","background","pad","left","right","vertical","elevation","style","zIndex","Heading","level","margin","Sidelist","useState","selected","setSelected","List","className","data","listData","itemProps","undefined","onClickItem","event","index","item","to","url","label","sidebarList","Sidebar","ResponsiveContext","Consumer","Collapsible","open","flex","width","environment","Preview","animation","Image","fit","src","ImageURLs","FullSize","alt","Title","Family","CollectiveNoun","Genus","Paragraph","Description","Card","show","setShow","round","onClick","height","Thumb","Layer","onEsc","onClickOutside","AnimalsContainer","animalsData","setAnimalsData","useEffect","a","async","fetch","res","json","console","error","getAnimalsList","then","Grid","map","animal","key","Id","FruitsContainer","fruitsData","setFruitsData","getFruitsList","fruit","id","Gallery","exact","path","Animals","Fruits","App","Grommet","theme","full","fill","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.71738796.chunk.js","sourcesContent":["const Theme = {\r\n  global: {\r\n    font: {\r\n      family: `-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans',\r\n      'Droid Sans', 'Helvetica Neue', sans-serif;`,\r\n    },\r\n  },\r\n  text: {\r\n    xsmall: { size: '0.75rem' },\r\n    small: { size: '0.825rem' },\r\n    medium: { size: '1rem' },\r\n    large: { size: '1.225rem' },\r\n    xlarge: { size: '1.5rem' },\r\n    xxlarge: { size: '2rem' },\r\n  },\r\n}\r\n\r\nexport default Theme\r\n","import React from 'react'\r\nimport { Box, Heading } from 'grommet'\r\n\r\nconst Navbar = (props: any) => (\r\n  <Box\r\n    tag=\"header\"\r\n    direction=\"row\"\r\n    align=\"center\"\r\n    justify=\"between\"\r\n    background=\"brand\"\r\n    pad={{ left: 'medium', right: 'small', vertical: 'small' }}\r\n    elevation=\"medium\"\r\n    style={{ zIndex: 1 }}\r\n    {...props}\r\n  >\r\n    <Heading level=\"3\" margin=\"none\">\r\n      Items Gallery\r\n    </Heading>\r\n  </Box>\r\n)\r\n\r\nexport default Navbar\r\n","import React, { useState } from 'react'\r\nimport { List } from 'grommet'\r\nimport './sidelist.scss'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Sidelist = (props: any) => {\r\n  const [selected, setSelected] = useState(0)\r\n\r\n  const onListItemClick = (event: any): void => {\r\n    if (selected === event.index) {\r\n      return\r\n    }\r\n    setSelected(event.index)\r\n  }\r\n\r\n  return (\r\n    <List\r\n      className=\"sidebar-list\"\r\n      data={props.listData}\r\n      itemProps={selected >= 0 ? { [selected]: { background: 'accent-1' } } : undefined}\r\n      onClickItem={onListItemClick}\r\n    >\r\n      {(item: any) => <Link to={item.url}>{item.label}</Link>}\r\n    </List>\r\n  )\r\n}\r\n\r\nexport default Sidelist\r\n","import React from 'react'\r\nimport { Box, Collapsible, ResponsiveContext } from 'grommet'\r\nimport Sidelist from '../../components/sidelist/Sidelist'\r\n\r\nconst sidebarList = [\r\n  { label: 'Animals', url: '/animals' },\r\n  { label: 'Fruits', url: '/fruits' },\r\n]\r\n\r\nconst Sidebar = () => {\r\n  return (\r\n    <ResponsiveContext.Consumer>\r\n      {size => (\r\n        <Collapsible direction=\"horizontal\" open={size !== 'small'}>\r\n          <Box flex width=\"small\" background=\"light-2\" elevation=\"small\" align=\"center\">\r\n            <Sidelist listData={sidebarList} />\r\n          </Box>\r\n        </Collapsible>\r\n      )}\r\n    </ResponsiveContext.Consumer>\r\n  )\r\n}\r\n\r\nexport default Sidebar\r\n","export const environment = {\r\n  animalListURL: 'http://styleguide.effectivedigital.com/interview/api/animals',\r\n  fruitListURL: 'http://styleguide.effectivedigital.com/interview/api/fruitveg',\r\n}\r\n","import React from 'react'\r\nimport { Box, Image, Heading, Paragraph } from 'grommet'\r\n\r\nconst Preview = ({ data }: any) => {\r\n  return (\r\n    <Box className=\"preview-container\" animation=\"zoomIn\" direction=\"row\">\r\n      <Box className=\"full-size-image\">\r\n        <Image fit=\"cover\" src={data.ImageURLs.FullSize} alt={data.Title}></Image>\r\n      </Box>\r\n      <Box className=\"details\" pad=\"small\">\r\n        <Box>\r\n          <Heading level={2} margin={{ vertical: 'small' }}>\r\n            {data.Title}\r\n          </Heading>\r\n        </Box>\r\n        <Box>\r\n          <Heading level={4} margin={{ vertical: 'xsmall' }}>\r\n            Family: {data.Family}\r\n          </Heading>\r\n        </Box>\r\n        {data.CollectiveNoun && (\r\n          <Box>\r\n            <Heading level={4} margin={{ vertical: 'xsmall' }}>\r\n              Collective Noun: {data.CollectiveNoun}\r\n            </Heading>\r\n          </Box>\r\n        )}\r\n        {data.Genus && (\r\n          <Box>\r\n            <Heading level={4} margin={{ vertical: 'xsmall' }}>\r\n              Genus: {data.Genus}\r\n            </Heading>\r\n          </Box>\r\n        )}\r\n        <Box className=\"card-description\">\r\n          <Paragraph>{data.Description}</Paragraph>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Preview\r\n","import React, { useState } from 'react'\r\nimport { Box, Image, Heading, Layer, Paragraph } from 'grommet'\r\nimport './card.scss'\r\nimport Preview from '../preview/Preview'\r\n\r\nconst Card = ({ data }: any) => {\r\n  const [show, setShow] = useState(false)\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        className=\"card-container\"\r\n        background=\"light-1\"\r\n        elevation=\"medium\"\r\n        pad=\"small\"\r\n        round\r\n        animation=\"fadeIn\"\r\n        onClick={() => setShow(true)}\r\n      >\r\n        <Box className=\"card-head\" direction=\"row-responsive\">\r\n          <Box className=\"thumb\" height=\"xsmall\" width=\"xsmall\">\r\n            <Image fit=\"cover\" src={data.ImageURLs.Thumb} alt={data.Title}></Image>\r\n          </Box>\r\n          <Box className=\"title\" margin={{ left: 'small' }}>\r\n            <Heading level={3}>{data.Title}</Heading>\r\n          </Box>\r\n        </Box>\r\n        <Box className=\"card-body\">\r\n          <Box className=\"card-description\">\r\n            <Paragraph>{data.Description}</Paragraph>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n      {show && (\r\n        <Layer onEsc={() => setShow(false)} onClickOutside={() => setShow(false)}>\r\n          <Preview data={data}></Preview>\r\n        </Layer>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Card\r\n","import React, { useState, useEffect } from 'react'\r\nimport { getAnimalsList } from '../../services/animals'\r\nimport Card from '../../components/card/Card'\r\nimport { Grid } from 'grommet'\r\nimport { AnimalI } from '../../types'\r\n\r\nconst AnimalsContainer = () => {\r\n  const [animalsData, setAnimalsData] = useState()\r\n  useEffect(() => {\r\n    getAnimalsList().then(data => setAnimalsData(data))\r\n  }, [])\r\n\r\n  return (\r\n    <Grid className=\"grid-container\">\r\n      {animalsData && animalsData.map((animal: AnimalI) => <Card data={animal} key={animal.Id} />)}\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default AnimalsContainer\r\n","import { environment } from '../../environment'\r\n\r\nconst getAnimalsList = async () => {\r\n  let animalsData\r\n  try {\r\n    const res = await fetch(environment.animalListURL)\r\n    animalsData = await res.json()\r\n  } catch (err) {\r\n    console.error('Something went wrong', err)\r\n  }\r\n  return animalsData\r\n}\r\n\r\nexport { getAnimalsList }\r\n","import React, { useState, useEffect } from 'react'\r\nimport { getFruitsList } from '../../services/fruits'\r\nimport { Grid } from 'grommet'\r\nimport Card from '../../components/card/Card'\r\nimport { FruitI } from '../../types'\r\n\r\nconst FruitsContainer = () => {\r\n  const [fruitsData, setFruitsData] = useState()\r\n  useEffect(() => {\r\n    getFruitsList().then(data => setFruitsData(data))\r\n  }, [])\r\n\r\n  return (\r\n    <Grid className=\"grid-container\">\r\n      {fruitsData && fruitsData.map((fruit: FruitI) => <Card data={fruit} key={fruitsData.id} />)}\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default FruitsContainer\r\n","import { environment } from '../../environment'\r\n\r\nconst getFruitsList = async () => {\r\n  let fruitsData\r\n  try {\r\n    const res = await fetch(environment.fruitListURL)\r\n    fruitsData = await res.json()\r\n  } catch (err) {\r\n    console.error('Something went wrong', err)\r\n  }\r\n  return fruitsData\r\n}\r\n\r\nexport { getFruitsList }\r\n","import React from 'react'\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\nimport AnimalsContainer from '../animals/Animals'\r\nimport FruitsContainer from '../fruits/Fruits'\r\nimport '../../../styles/grid.scss'\r\n\r\nconst Gallery = () => {\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/\">\r\n        <Redirect to=\"/animals\"></Redirect>\r\n      </Route>\r\n      <Route path=\"/animals\">\r\n        <AnimalsContainer />\r\n      </Route>\r\n      <Route path=\"/fruits\">\r\n        <FruitsContainer />\r\n      </Route>\r\n    </Switch>\r\n  )\r\n}\r\n\r\nexport default Gallery\r\n","import React from 'react'\r\nimport './App.scss'\r\nimport { Box, Grommet } from 'grommet'\r\nimport Theme from '../styles/theme'\r\nimport Navbar from './containers/navbar/Navbar'\r\nimport Sidebar from './containers/sidebar/Sidebar'\r\nimport Gallery from './containers/gallery/Gallery'\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Grommet theme={Theme} full>\r\n      <Router>\r\n        <Box fill>\r\n          <Navbar></Navbar>\r\n          <Box direction=\"row\" flex>\r\n            <Sidebar />\r\n            <Box flex margin=\"medium\">\r\n              <Gallery />\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n      </Router>\r\n    </Grommet>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config): void {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL || '', window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config): void {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = (): void => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = (): void => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.')\r\n    })\r\n}\r\n\r\nexport function unregister(): void {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './styles/index.scss'\r\nimport App from './app/App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}